 package com.btg.osinergmin.siged.domain;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.Lob;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import com.btg.dao.entidad.Entidad;

@Entity
@Table(name="expediente")
@NamedQueries({
	@NamedQuery(name="Expediente.findAll",query="SELECT e FROM Expediente e order by nroexpediente"),
	@NamedQuery(name="Expediente.findByIdexpediente",query="SELECT e FROM Expediente e WHERE e.id = :idexpediente"),
	@NamedQuery(name="Expediente.findByNroexpediente",query="SELECT e FROM Expediente e WHERE e.nroexpediente = :nroexpediente"),
	@NamedQuery(name="Expediente.findByDescripcion",query="SELECT e FROM Expediente e WHERE e.descripcion = :descripcion"),
	@NamedQuery(name="Expediente.findByObservacion",query="SELECT e FROM Expediente e WHERE e.observacion = :observacion"),
	@NamedQuery(name="Expediente.findByFechacreacion",query="SELECT e FROM Expediente e WHERE e.fechacreacion = :fechacreacion"),
	@NamedQuery(name="Expediente.findByEstado",query="SELECT e FROM Expediente e WHERE e.estado = :estado"),
	@NamedQuery(name="Expediente.findByCriteria",query="SELECT e FROM Expediente e WHERE LOWER(e.cliente.numeroIdentificacion) LIKE :nroidentificacion AND (LOWER(e.cliente.razonSocial) LIKE :razonsocial OR LOWER(e.cliente.nombres) LIKE :razonsocial OR LOWER(e.cliente.apellidoPaterno) LIKE :razonsocial) AND LOWER(e.nroexpediente) LIKE :nroexpediente AND LOWER(e.asunto) LIKE :asunto AND e.proceso.idproceso=:proceso AND e.fechacreacion=:fecha AND e.estado='A' ORDER BY nroexpediente"),
	@NamedQuery(name="Expediente.getMaxIdExpediente",query="SELECT MAX(e.id) FROM Expediente e"),
	@NamedQuery(name="Expediente.findByNroDocument",query="SELECT e FROM Expediente e WHERE e.id = :ni"),
	@NamedQuery(name="Expediente.findByNrointerno",query="SELECT e FROM Expediente e WHERE e.nrointerno = :nrointerno"),
	@NamedQuery(name="Expediente.findByIdcliente",query="SELECT e FROM Expediente e WHERE e.cliente.idCliente = :idcliente AND e.estado = :estado"),
	@NamedQuery(name="Expediente.filtrarExpediente",query="SELECT e FROM Expediente e WHERE LOWER(e.nroexpediente) LIKE :nroexpediente AND LOWER(e.proceso.nombre) LIKE :proceso AND LOWER(e.cliente.numeroIdentificacion) LIKE :nroidentificacion AND (LOWER(e.cliente.razonSocial) LIKE :cliente OR LOWER(e.cliente.nombres) LIKE :cliente OR LOWER(e.cliente.apellidoPaterno) LIKE :cliente) AND e.estado='A' ORDER BY nroexpediente"),
	@NamedQuery(name="Expediente.filtrarExpedienteFlujo",query="SELECT e FROM Expediente e WHERE LOWER(e.nroexpediente) LIKE :nroexpediente AND LOWER(e.proceso.nombre) LIKE :proceso AND LOWER(e.cliente.numeroIdentificacion) LIKE :nroidentificacion AND (LOWER(e.cliente.razonSocial) LIKE :cliente OR LOWER(e.cliente.nombres) LIKE :cliente OR LOWER(e.cliente.apellidoPaterno) LIKE :cliente) AND LOWER(e.concesionario.ruc) LIKE :ruc AND LOWER(e.concesionario.razonSocial) LIKE :concesionario AND e.estado='A' ORDER BY nroexpediente"),
	@NamedQuery(name="Expediente.findByNumeroexpedienteEstado",query="SELECT e FROM Expediente e WHERE LOWER(e.nroexpediente) = :numeroexpediente AND e.estado = :estado")
})
public class Expediente implements Entidad,Auditable{

	private static final long serialVersionUID=1L;

	@Id
	@GeneratedValue(strategy=GenerationType.SEQUENCE,generator="EXPEDIENTE_SEQ")
	@SequenceGenerator(name="EXPEDIENTE_SEQ",sequenceName="EXPEDIENTE_SEQ",initialValue=1,allocationSize=1)
	// @GeneratedValue(strategy = GenerationType.IDENTITY)
	@Basic(optional=false)
	@Column(name="idexpediente")
	private Integer id;

	@Basic(optional=false)
	@Column(name="nroexpediente")
	private String nroexpediente;

	@Column(name="descripcion")
	private String descripcion;

	@Column(name="asunto")
	private String asunto;

	@Column(name="sumilla")
	private String sumilla;

	@Lob
	@Column(name="contenido")
	private String contenido;

	@Column(name="observacionarchivar")
	private String observacionArchivar;

	@Column(name="observacion")
	private String observacion;

	@Basic(optional=false)
	@Column(name="fechacreacion")
	@Temporal(TemporalType.TIMESTAMP)
	private Date fechacreacion;

	@Column(name="fechaarchivar")
	@Temporal(TemporalType.TIMESTAMP)
	private Date fechaarchivar;

	@Basic(optional=false)
	@Column(name="estado")
	private char estado;

	@Column(name="observacionrechazo")
	private String observacionrechazo;

	@Column(name="NROINTERNO")
	private String nrointerno;

	@Column(name="clienterazonsocial")
	private String clienterazonsocial;

	@Column(name="clienterepresentantelegal")
	private String clienterepresentantelegal;

	@Column(name="clientedireccionprincipal")
	private String clientedireccionprincipal;

	@Column(name="clienteubigeoprincipal")
	private Integer clienteubigeoprincipal;

	@Column(name="clientedireccionalternativa")
	private String clientedireccionalternativa;

	@Column(name="clienteubigeoalternativo")
	private Integer clienteubigeoalternativo;

	@Column(name="clientecorreo")
	private String clientecorreo;

	@Column(name="clientetelefono")
	private String clientetelefono;

	@Column(name="clientenombres")
	private String clientenombres;

	@Column(name="clienteapellidopaterno")
	private String clienteapellidopaterno;

	@Column(name="clienteapellidomaterno")
	private String clienteapellidomaterno;

	@Column(name="estaenflujo")
	private Character estaenflujo;

	@Column(name="historico")
	private Character historico;

	@Column(name="oefa")
	private Character oefa;

	@Column(name="actividad")
	private String actividad;

	@ManyToMany(mappedBy="expedienteList")
	private List<Procedimientoincumplido> procedimientoincumplidoList;

	@OneToOne(cascade=CascadeType.REFRESH,mappedBy="expediente")
	private Expedientestor expedientestor;

	@OneToMany(cascade=CascadeType.ALL,mappedBy="idexpediente")
	private List<Carpeta> carpetaList;

	@OneToMany(cascade=CascadeType.ALL,mappedBy="expediente")
	private List<Trazabilidadexpediente> trazabilidadexpedienteList;

	/*@OneToOne(cascade=CascadeType.ALL,mappedBy="expediente")
	private Expedientesas expedientesas;*/

	@OneToMany(cascade=CascadeType.ALL,mappedBy="expediente")
	private List<Documento> documentoList;

	@JoinColumn(name="idactividad",referencedColumnName="idactividad")
	@ManyToOne
	private Actividad idactividad;

	@JoinColumn(name="cliente",referencedColumnName="idcliente")
	@ManyToOne
	private Cliente cliente;

	@JoinColumn(name="concesionario",referencedColumnName="idconcesionario")
	@ManyToOne
	private Concesionario concesionario;

	@JoinColumn(name="idetapa",referencedColumnName="idetapa")
	@ManyToOne
	private Etapa idetapa;

	@JoinColumn(name="proceso",referencedColumnName="idproceso")
	@ManyToOne(optional=false)
	private Proceso proceso;

	@JoinColumn(name="idpropietario",referencedColumnName="idusuario")
	@ManyToOne(optional=false)
	private Usuario idpropietario;

	@OneToMany(cascade=CascadeType.ALL,mappedBy="expediente")
	private List<Documentoxexpediente> documentoxexpedienteList;

	@OneToMany(mappedBy="expediente")
	private List<Auditoria> auditoriaList;
	
	/*
	 * Transients
	 */
	private transient Integer nroFoliosTotal;
	
	private transient boolean nuevo;

	private transient String sProceso;
	
	private transient String sUnidad;
	
	private transient String sConcecionario;

	/*
	 * @Transient private String sProceso;
	 * 
	 * @Transient private String sClienteTipoIdentificacion;
	 */

	/*
	 * Constructors
	 */
	public Expediente(){
	}

	public Expediente(Integer idexpediente){
		this.id=idexpediente;
	}

	public Expediente(Integer idexpediente,Usuario idpropietario){
		this.id=idexpediente;
		this.idpropietario=idpropietario;
	}

	public Expediente(Integer idexpediente,String nroexpediente,Date fechacreacion,char estado){
		this.id=idexpediente;
		this.nroexpediente=nroexpediente;
		this.fechacreacion=fechacreacion;
		this.estado=estado;
	}

	public Expediente(String asunto,String sConcecionario,Date fechacreacion,Integer idexpediente,String nroexpediente,String sProceso,String sUnidad){
		this.asunto=asunto;
		this.sConcecionario=sConcecionario;
		this.fechacreacion=fechacreacion;
		this.id=idexpediente;
		this.nroexpediente=nroexpediente;
		this.sProceso=sProceso;
		this.sUnidad=sUnidad;
	}

	public Expediente(Integer id, Proceso proceso, String nroexpediente, Cliente cliente, String asunto){
		this.id = id;
		this.nroexpediente = nroexpediente;
		this.cliente = cliente;
		this.asunto = asunto;
		this.proceso = proceso;
	}
	
	/*
	 * public Expediente(Integer iIdExpediente, String sNroExpediente, Date
	 * dFechaCreacion, String sRazonSocial1, String sNombres1, String
	 * sApellidoPaterno1, String sApellidoMaterno1, String sProceso, String
	 * sClienteTipoIdentificacion, String sRazonSocial2, String sNombres2,
	 * String sApellidoPaterno2, String sApellidoMaterno2) { this.idexpediente =
	 * iIdExpediente; this.nroexpediente = sNroExpediente; this.fechacreacion =
	 * dFechaCreacion; this.clienterazonsocial = (sRazonSocial1 == null) ?
	 * sRazonSocial2 : sRazonSocial1; this.clientenombres = (sNombres1 == null)
	 * ? sNombres2 : sNombres1; this.clienteapellidopaterno = (sApellidoPaterno1
	 * == null) ? sApellidoPaterno2 : sApellidoPaterno1;
	 * this.clienteapellidomaterno = (sApellidoMaterno1 == null) ?
	 * sApellidoMaterno2 : sApellidoMaterno1; this.sProceso = sProceso;
	 * this.sClienteTipoIdentificacion = sClienteTipoIdentificacion; }
	 */

	/*
	 * Getters & Setters
	 */
	public Integer getIdexpediente(){
		return id;
	}

	public void setIdexpediente(Integer idexpediente){
		this.id=idexpediente;
	}

	public String getNroexpediente(){
		return nroexpediente;
	}

	public void setNroexpediente(String nroexpediente){
		this.nroexpediente=nroexpediente;
	}

	public String getDescripcion(){
		return descripcion;
	}

	public void setDescripcion(String descripcion){
		this.descripcion=descripcion;
	}

	public String getAsunto(){
		return asunto;
	}

	public String getAsuntoHTML(){
		if(asunto != null){
			return asunto.replace("\"", "");
		}
		return "";
	}
	
	public void setAsunto(String asunto){
		this.asunto=asunto;
	}

	public String getSumilla(){
		return sumilla;
	}

	public void setSumilla(String sumilla){
		this.sumilla=sumilla;
	}

	public String getContenido(){
		return contenido;
	}

	public void setContenido(String contenido){
		this.contenido=contenido;
	}

	public String getObservacion(){
		return observacion;
	}

	public void setObservacion(String observacion){
		this.observacion=observacion;
	}

	public Date getFechacreacion(){
		return fechacreacion;
	}

	public void setFechacreacion(Date fechacreacion){
		this.fechacreacion=fechacreacion;
	}

	public char getEstado(){
		return estado;
	}

	public void setEstado(char estado){
		this.estado=estado;
	}

	public void setEstado(Character estado){
		if(estado != null){
			this.estado=estado;
		}
	}

	public String getObservacionrechazo(){
		return observacionrechazo;
	}

	public void setObservacionrechazo(String observacionrechazo){
		this.observacionrechazo=observacionrechazo;
	}

	public String getNrointerno(){
		return nrointerno;
	}

	public void setNrointerno(String nrointerno){
		this.nrointerno=nrointerno;
	}

	public String getClienterazonsocial(){
		return clienterazonsocial;
	}

	public void setClienterazonsocial(String clienterazonsocial){
		this.clienterazonsocial=clienterazonsocial;
	}

	public String getClienterepresentantelegal(){
		return clienterepresentantelegal;
	}

	public void setClienterepresentantelegal(String clienterepresentantelegal){
		this.clienterepresentantelegal=clienterepresentantelegal;
	}

	public String getClientedireccionprincipal(){
		return clientedireccionprincipal;
	}

	public void setClientedireccionprincipal(String clientedireccionprincipal){
		this.clientedireccionprincipal=clientedireccionprincipal;
	}

	public Integer getClienteubigeoprincipal(){
		return clienteubigeoprincipal;
	}

	public void setClienteubigeoprincipal(Integer clienteubigeoprincipal){
		this.clienteubigeoprincipal=clienteubigeoprincipal;
	}

	public String getClientedireccionalternativa(){
		return clientedireccionalternativa;
	}

	public void setClientedireccionalternativa(String clientedireccionalternativa){
		this.clientedireccionalternativa=clientedireccionalternativa;
	}

	public Integer getClienteubigeoalternativo(){
		return clienteubigeoalternativo;
	}

	public void setClienteubigeoalternativo(Integer clienteubigeoalternativo){
		this.clienteubigeoalternativo=clienteubigeoalternativo;
	}

	public String getClientecorreo(){
		return clientecorreo;
	}

	public void setClientecorreo(String clientecorreo){
		this.clientecorreo=clientecorreo;
	}

	public String getClientetelefono(){
		return clientetelefono;
	}

	public void setClientetelefono(String clientetelefono){
		this.clientetelefono=clientetelefono;
	}

	public String getClientenombres(){
		return clientenombres;
	}

	public void setClientenombres(String clientenombres){
		this.clientenombres=clientenombres;
	}

	public String getClienteapellidopaterno(){
		return clienteapellidopaterno;
	}

	public void setClienteapellidopaterno(String clienteapellidopaterno){
		this.clienteapellidopaterno=clienteapellidopaterno;
	}

	public String getClienteapellidomaterno(){
		return clienteapellidomaterno;
	}

	public void setClienteapellidomaterno(String clienteapellidomaterno){
		this.clienteapellidomaterno=clienteapellidomaterno;
	}

	public Character getEstaenflujo(){
		return estaenflujo;
	}

	public void setEstaenflujo(Character estaenflujo){
		this.estaenflujo=estaenflujo;
	}

	public Character getHistorico(){
		return historico;
	}

	public void setHistorico(Character historico){
		this.historico=historico;
	}

	public List<Procedimientoincumplido> getProcedimientoincumplidoList(){
		return procedimientoincumplidoList;
	}

	public void setProcedimientoincumplidoList(List<Procedimientoincumplido> procedimientoincumplidoList){
		this.procedimientoincumplidoList=procedimientoincumplidoList;
	}

	public Expedientestor getExpedientestor(){
		return expedientestor;
	}

	public void setExpedientestor(Expedientestor expedientestor){
		this.expedientestor=expedientestor;
	}

	public List<Carpeta> getCarpetaList(){
		return carpetaList;
	}

	public void setCarpetaList(List<Carpeta> carpetaList){
		this.carpetaList=carpetaList;
	}

	public List<Trazabilidadexpediente> getTrazabilidadexpedienteList(){
		return trazabilidadexpedienteList;
	}

	public void setTrazabilidadexpedienteList(List<Trazabilidadexpediente> trazabilidadexpedienteList){
		this.trazabilidadexpedienteList=trazabilidadexpedienteList;
	}
/*
	public Expedientesas getExpedientesas(){
		return expedientesas;
	}

	public void setExpedientesas(Expedientesas expedientesas){
		this.expedientesas=expedientesas;
	}
*/
	public List<Documento> getDocumentoList(){
		return documentoList;
	}

	public void setDocumentoList(List<Documento> documentoList){
		this.documentoList=documentoList;
	}

	public Actividad getIdactividad(){
		return idactividad;
	}

	public void setIdactividad(Actividad idactividad){
		this.idactividad=idactividad;
	}

	public Cliente getCliente(){
		return cliente;
	}

	public void setCliente(Cliente cliente){
		this.cliente=cliente;
	}

	public Concesionario getConcesionario(){
		return concesionario;
	}

	public void setConcesionario(Concesionario concesionario){
		this.concesionario=concesionario;
	}

	public Etapa getIdetapa(){
		return idetapa;
	}

	public void setIdetapa(Etapa idetapa){
		this.idetapa=idetapa;
	}

	public Proceso getProceso(){
		return proceso;
	}

	public void setProceso(Proceso proceso){
		this.proceso=proceso;
	}

	public Usuario getIdpropietario(){
		return idpropietario;
	}

	public void setIdpropietario(Usuario idpropietario){
		this.idpropietario=idpropietario;
	}

	public List<Documentoxexpediente> getDocumentoxexpedienteList(){
		return documentoxexpedienteList;
	}

	public void setDocumentoxexpedienteList(List<Documentoxexpediente> documentoxexpedienteList){
		this.documentoxexpedienteList=documentoxexpedienteList;
	}

	public List<Auditoria> getAuditoriaList(){
		return auditoriaList;
	}

	public void setAuditoriaList(List<Auditoria> auditoriaList){
		this.auditoriaList=auditoriaList;
	}

	public Documento getDocumentoPrincipal(){
		for(Documento documento : documentoList){
			if(documento.esDocumentoPrincipal()){
				return documento;
			}
		}
		// no deberia suceder, un expediente debe tener un documento principal
		return null;
	}

	@Transient
	public Integer getNroFoliosTotal(){
		return nroFoliosTotal;
	}

	@Transient
	public void setNroFoliosTotal(Integer nroFoliosTotal){
		this.nroFoliosTotal=nroFoliosTotal;
	}

	/*
	 * public String getsProceso() { return sProceso; }
	 * 
	 * public void setsProceso(String sProceso) { this.sProceso = sProceso; }
	 * 
	 * public String getsClienteTipoIdentificacion() { return
	 * sClienteTipoIdentificacion; }
	 * 
	 * public void setsClienteTipoIdentificacion(String
	 * sClienteTipoIdentificacion) { this.sClienteTipoIdentificacion =
	 * sClienteTipoIdentificacion; }
	 */

	public String getsProceso(){
		return sProceso;
	}

	public void setsProceso(String sProceso){
		this.sProceso=sProceso;
	}

	public String getsUnidad(){
		return sUnidad;
	}

	public void setsUnidad(String sUnidad){
		this.sUnidad=sUnidad;
	}

	public String getsConcecionario(){
		return sConcecionario;
	}

	public void setsConcecionario(String sConcecionario){
		this.sConcecionario=sConcecionario;
	}

	public Character getOefa(){
		return oefa;
	}

	public void setOefa(Character oefa){
		this.oefa=oefa;
	}

	@Override
	public int hashCode(){
		int hash=0;
		hash+=(id != null ? id.hashCode() : 0);
		return hash;
	}

	@Override
	public boolean equals(Object object){
		// TODO: Warning - this method won't work in the case the id fields are
		// not set
		if(!(object instanceof Expediente)){
			return false;
		}
		Expediente other=(Expediente) object;
		if((this.id == null && other.id != null) || (this.id != null && !this.id.equals(other.id))){
			return false;
		}
		return true;
	}

	@Override
	public String toString(){
		return "ID[" + id + "]";
	}

	/*
	 * Auditoria
	 */
	public List<AuditableCampo> getCamposAuditables(){
		List<AuditableCampo> lstCamposAuditables=new ArrayList<AuditableCampo>();

		lstCamposAuditables.add(new AuditableCampo("proceso","Proceso"));
		lstCamposAuditables.add(new AuditableCampo("cliente","Cliente"));

		return lstCamposAuditables;
	}

	public boolean isNuevo(){
		return nuevo;
	}

	public void setNuevo(boolean nuevo){
		this.nuevo=nuevo;
	}

	public String getActividad(){
		return actividad;
	}

	public void setActividad(String actividad){
		this.actividad=actividad;
	}

	public String getObservacionArchivar(){
		return observacionArchivar;
	}

	public void setObservacionArchivar(String observacionArchivar){
		this.observacionArchivar=observacionArchivar;
	}

	public Date getFechaarchivar(){
		return fechaarchivar;
	}

	public void setFechaarchivar(Date fechaarchivar){
		this.fechaarchivar=fechaarchivar;
	}

	@Override
	public Integer getId(){
		return id;
	}

	@Override
	public void setId(Integer id){
		this.id=id;
	}

}